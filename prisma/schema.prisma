// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ENUMERATIONS for status fields across the application
enum UserRole {
  PASSENGER
  DRIVER
  ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VehicleType {
  HATCHBACK
  SEDAN
  SUV
  LUXURY
}

enum RideStatus {
  SEARCHING_FOR_PASSENGERS /// Driver has set a route and is waiting for bookings
  IN_PROGRESS /// At least one passenger has been picked up
  COMPLETED /// All passengers have been dropped off
  CANCELLED /// Driver cancelled the entire trip
}

enum BookingStatus {
  REQUESTED /// Passenger has booked, waiting for driver confirmation/pickup
  ACCEPTED /// Driver has accepted the booking
  PICKED_UP
  DROPPED_OFF
  CANCELLED /// Passenger cancelled their specific booking
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum ReviewType {
  PASSENGER_TO_DRIVER
  DRIVER_TO_PASSENGER
}

/// MODELS

/// Represents any user in the system, can be a Passenger or a Driver
model User {
  id              String   @id @default(cuid())
  phone           String   @unique
  name            String
  email           String?  @unique
  password        String // hashed password
  profileImageUrl String?
  role            UserRole @default(PASSENGER)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // A user can be a driver (one-to-one)
  driverProfile   Driver?
  // A user can be a passenger in many rides
  bookings        RidePassenger[] @relation("PassengerBookings")
  // Reviews a user has given
  reviewsGiven    Review[]        @relation("Reviewer")
  // Reviews a user has received
  reviewsReceived Review[]        @relation("Reviewee")

  @@map("users")
}

/// Contains driver-specific information and is linked to a User account
model Driver {
  id                 String             @id @default(cuid())
  isAvailable        Boolean            @default(false)
  verificationStatus VerificationStatus @default(APPROVED)
  currentLocationLat Float?
  currentLocationLng Float?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relation to the base User model (one-to-one)
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  // A driver has one primary vehicle
  vehicle   Vehicle?
  // A driver has multiple documents for verification
  documents DriverDocuments[]
  // A driver can conduct many rides
  rides     Ride[]

  @@map("drivers")
}

/// Vehicle information for a specific driver
model Vehicle {
  id                 String      @id @default(cuid())
  make               String
  model              String
  year               Int
  color              String
  registrationNumber String      @unique
  type               VehicleType

  // Relation to the Driver model (one-to-one)
  driver   Driver @relation(fields: [driverId], references: [id])
  driverId String @unique

  @@map("vehicles")
}

model AadharCard {
  id             String            @id @default(cuid())
  adhaarNumber   BigInt            @unique
  name           String // Name as in AadharCard
  DriverDocument DriverDocuments[]
}

model DriverLicense {
  id             String            @id @default(cuid())
  DLNumber       String
  DOB            String
  DriverDocument DriverDocuments[]
}

/// Documents for driver verification
model DriverDocuments {
  id              String        @id @default(cuid())
  adhaarCard      AadharCard    @relation(fields: [aadharCardId], references: [id])
  driverLicense   DriverLicense @relation(fields: [driverLicenseId], references: [id])
  isVerified      Boolean       @default(true)
  driver          Driver        @relation(fields: [driverId], references: [id])
  driverId        String
  aadharCardId    String
  driverLicenseId String

  @@map("driver_documents")
}

/// Represents the entire trip taken by a driver's vehicle. It can contain multiple passengers.
model Ride {
  id                String     @id @default(cuid())
  status            RideStatus @default(SEARCHING_FOR_PASSENGERS)
  startTime         DateTime?
  endTime           DateTime?
  estimatedDistance Float? // in kilometers
  estimatedDuration Int? // in minutes

  // The overall route for the driver
  startLocationLat Float
  startLocationLng Float
  endLocationLat   Float
  endLocationLng   Float

  // Relation to the driver conducting the ride
  driver   Driver @relation(fields: [driverId], references: [id])
  driverId String

  // This ride is composed of one or more passenger bookings
  passengers RidePassenger[]

  createdAt DateTime @default(now())

  @@map("rides")
}

/// Join table connecting a User (passenger) to a specific Ride. This is a single booking.
model RidePassenger {
  id     String        @id @default(cuid())
  status BookingStatus @default(REQUESTED)
  otp    String // Boarding OTP for this passenger
  fare   Decimal       @db.Decimal(10, 2)

  // Passenger-specific pickup and dropoff points
  pickupLocationLat  Float
  pickupLocationLng  Float
  dropoffLocationLat Float
  dropoffLocationLng Float

  // Relation to the overall ride
  ride   Ride   @relation(fields: [rideId], references: [id])
  rideId String

  // Relation to the user who is the passenger
  passenger   User   @relation("PassengerBookings", fields: [passengerId], references: [id])
  passengerId String

  // A booking can have one payment record
  payment Payment?
  // A booking can have reviews associated with it
  reviews Review[]

  createdAt DateTime @default(now())

  @@map("ride_passengers")
}

/// Represents a payment transaction for a single booking
model Payment {
  id               String        @id @default(cuid())
  amount           Decimal       @db.Decimal(10, 2)
  status           PaymentStatus @default(PENDING)
  gatewayPaymentId String? // e.g., Stripe or Razorpay charge ID
  method           String? // e.g., "upi", "card"

  // Relation to the specific booking this payment is for
  booking   RidePassenger @relation(fields: [bookingId], references: [id])
  bookingId String        @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

/// Represents a review given after a ride
model Review {
  id         String     @id @default(cuid())
  rating     Int // Rating from 1 to 5
  comment    String?
  reviewType ReviewType

  // The booking this review is associated with
  booking   RidePassenger @relation(fields: [bookingId], references: [id])
  bookingId String

  // Who gave the review
  reviewer   User   @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewerId String

  // Who received the review
  reviewee   User   @relation("Reviewee", fields: [revieweeId], references: [id])
  revieweeId String

  createdAt DateTime @default(now())

  @@map("reviews")
}
