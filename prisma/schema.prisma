// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum Role {
  Driver
  Rider
  Admin
}
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?
  isAdmin   Boolean  @default(false)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cars          Car[]
  tripsAsPassenger Trip[] @relation("PassengerTrips")
  tripsAsDriver    Trip[] @relation("DriverTrips")
  reviewsGiven     Review[] @relation("ReviewsGiven")
  reviewsReceived  Review[] @relation("ReviewsReceived")
  adminActions     AdminAction[]
}

model Car {
  id             Int      @id @default(autoincrement())
  ownerId        Int
  make           String
  model          String
  registrationNo String   @unique
  pricePerKm     Float
  availability   Boolean  @default(true)
  verified       Boolean  @default(false)

  owner          User     @relation(fields: [ownerId], references: [id])
  trips          Trip[]
}

model Trip {
  id            Int       @id @default(autoincrement())
  passengerId   Int
  driverId      Int?
  carId         Int
  startLocation String
  endLocation   String
  status        TripStatus
  fareEstimate  Float
  finalFare     Float?
  startTime     DateTime?
  endTime       DateTime?

  passenger     User @relation("PassengerTrips", fields: [passengerId], references: [id])
  driver        User? @relation("DriverTrips", fields: [driverId], references: [id])
  car           Car  @relation(fields: [carId], references: [id])
  payment       Payment?
  review        Review?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum TripStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Payment {
  id         Int      @id @default(autoincrement())
  tripId     Int      @unique
  amount     Float
  method     PaymentMethod
  status     PaymentStatus
  date       DateTime @default(now())

  trip       Trip     @relation(fields: [tripId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Review {
  id          Int      @id @default(autoincrement())
  tripId      Int      @unique
  reviewerId  Int
  revieweeId  Int
  rating      Int
  comment     String?

  trip        Trip     @relation(fields: [tripId], references: [id])
  reviewer    User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewee    User     @relation("ReviewsReceived", fields: [revieweeId], references: [id])
}

model AdminAction {
  id        Int      @id @default(autoincrement())
  adminId   Int
  action    String
  details   String?
  createdAt DateTime @default(now())

  admin     User     @relation(fields: [adminId], references: [id])
}



